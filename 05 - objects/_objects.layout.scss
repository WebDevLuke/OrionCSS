//--------------------------------------------------------------------------------------------------------------------------------------
// LAYOUT OBJECT
//--------------------------------------------------------------------------------------------------------------------------------------

/*
The layout object is used to construct a grid-like layout system, with each layout__item representing an
individual column. Typically used with container object and width utilities to form a grid system.
*/

// OPTIONS
//--------------------------------------------------------------------------------------------------------------------------------------

// Define default gutter width
$gutter: 30px;


// BASE & ELEMENTS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
<div class="o-layout">
	<div class="o-layout__item u-1/2">CONTENT</div>
	<div class="o-layout__item u-1/2">CONTENT</div>
</div>
*/

/*
[1] Allows us to use the layout object on any type of element.
[2] We need to defensively reset any box-model properties.
[3] Absorb amount equal to 15px on either side to account for their spacing
[4] Set font-size to 0 to remove any spacing between individual inline-block columns
*/

.o-layout {
	display:flex; /* [1] */
	flex-wrap:wrap;
	flex-direction:row;
	align-items:flex-start;
	padding:0; /* [2] */
	margin:0; /* [2] */
	margin-left:rem(-$gutter / 2); /* [3] */
	margin-right:rem(-$gutter / 2); /* [3] */
	font-size:0; /* [4] */
}

/*
[1] Required in order to combine fluid widths with fixed gutters.
[2] Allows us to manipulate grids vertically, with text-level properties, etc...
[3] Default item alignment is with the tops of each other, like most traditional grid/layout systems.
[4] Restore proper font size, whilst still removing spacing between individual inline-block comments
*/

.o-layout__item { 
	box-sizing:border-box; /* [1] */
	display:inline-block; /* [2] */
	vertical-align: top; /* [3] */
	width:100%;
	padding-left:rem($gutter / 2);
	padding-right:rem($gutter / 2);
	font-size: 1rem; /* [4] */
}


// SPACING MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Tweak the spacing between individual columns
*/ 

// Generate using settings.spacing
// Example o-layout--spacing-small
@each $sp-name, $sp-value in $spacing {
	.o-layout--spacing-#{$sp-name} {
		margin-left:rem(-$sp-value / 2);
		margin-right:rem(-$sp-value / 2);
		& > .o-layout__item {
			padding-left:rem($sp-value / 2);
			padding-right:rem($sp-value / 2);
		}
	}
}

// Create responsive variants using settings.breakpoints
// Changes padding once breakpoint is hit
// Example o-layout--spacing@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		@each $sp-name, $sp-value in $spacing {
			.o-layout--spacing-#{$sp-name}\@#{$bp-name} {
				margin-left:rem(-$sp-value / 2);
				margin-right:rem(-$sp-value / 2);
				& > .o-layout__item {
					padding-left:rem($sp-value / 2);
					padding-right:rem($sp-value / 2);
				}
			}
		}
	}
}

// Create responsive variants using settings.breakpoints
// Changes padding until breakpoint is hit
// Example o-layout--spacing@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		@each $sp-name, $sp-value in $spacing {
			.o-layout--spacing-#{$sp-name}\@max-#{$bp-name} {
				margin-left:rem(-$sp-value / 2);
				margin-right:rem(-$sp-value / 2);
				& > .o-layout__item {
					padding-left:rem($sp-value / 2);
					padding-right:rem($sp-value / 2);
				}
			}
		}
	}
}


// FLUSH MODIFIER
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Flush removes the gutter between layout items.
*/ 

/*
[1] Remove negative margins as we no longer have to absorb any paddings from columns
*/

.o-layout--flush {
	margin-left:0; /* [1] */
	margin-right:0; /* [1] */
	& > .o-layout__item {
		padding-left:0;
		padding-right:0;
	}
}

// Changes position when breakpoint is hit
// Example: .o-layout--flush@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-layout--flush\@#{$bp-name} > .o-layout__item {
			padding-left:0;
			padding-right:0;
		}
	}
}

// Changes position until breakpoint is hit
// Example: .o-layout--flush@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-layout--flush\@max-#{$bp-name} > .o-layout__item {
			padding-left:0;
			padding-right:0;
		}
	}
}


// FIT MODIFIER
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Allows each layout item to size itself automatically by dividing the space equally between the total number
of items.
*/

.o-layout--fit {
	flex-wrap:nowrap;
}

// Makes columns fit when breakpoint is hit
// Example: .o-layout--fit@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-layout--fit\@#{$bp-name} {
			flex-wrap:nowrap;
		}
	}
}

// Makes columns fit until breakpoint is hit
// Example: .o-layout--fit@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-layout--fit\@max-#{$bp-name} {
			flex-wrap:nowrap;
		}
	}
}


// EQUAL HEIGHT MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Makes each column have an equal height. Also modifiers for individual columns.
*/

.o-layout--fit-height {
	align-items:stretch;
}

.o-layout__item--fit-height {
	align-self:stretch;
}

// Changes height when breakpoint is hit
// Example: .o-layout--equal@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		.o-layout--fit-height\@#{$bp-name} {
			align-items:stretch;
		}
		.o-layout__item--fit-height\@#{$bp-name} {
			align-self:stretch;
		}
	}
}

// Changes height until breakpoint is hit
// Example: .o-layout--equal@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		.o-layout--fit-height\@max-#{$bp-name} {
			align-items:stretch;
		}
		.o-layout__item--fit-height\@max-#{$bp-name} {
			align-self:stretch;
		}
	}
}


// VERTICAL ALIGNMENT MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Modifiers to change the vertical alignment of the layout as a whole or individual columns
*/

// Default vertical alignment
.o-layout--top {
	align-items:flex-start;
}

.o-layout__item--top {
	align-self:flex-start;
} 

.o-layout--bottom {
	align-items:flex-end;
}

.o-layout__item--bottom {
	align-self:flex-end;
}

.o-layout--middle {
	align-items:center;
}

.o-layout__item--middle {
	align-self:center;
}

// Columns are align to match their baseline 
.o-layout--baseline {
	align-items:baseline;
}

.o-layout__item--baseline {
	align-self:baseline;
}

// Changes vertical-alignment when breakpoint is hit
// Example: .o-layout--center@md
// Example: .o-layout__item--center@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		// Default vertical alignment
		.o-layout--top\@#{$bp-name} {
			align-items:flex-start;
		}

		.o-layout__item--top\@#{$bp-name} {
			align-self:flex-start;
		}

		.o-layout--bottom\@#{$bp-name} {
			align-items:flex-end;
		}

		.o-layout__item--bottom\@#{$bp-name} {
			align-self:flex-end;
		}

		.o-layout--middle\@#{$bp-name} {
			align-items:center;
		}

		.o-layout__item--middle\@#{$bp-name} {
			align-self:center;
		}

		// Columns are align to match their baseline 
		.o-layout--baseline\@#{$bp-name} {
			align-items:baseline;
		}

		.o-layout__item--baseline\@#{$bp-name} {
			align-self:baseline;
		}
	}
}

// Changes vertical-alignment until breakpoint is hit
// Example: .o-layout--center@max-md
// Example: .o-layout__item--center@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		// Default vertical alignment
		.o-layout--top\@max-#{$bp-name} {
			align-items:flex-start;
		}

		.o-layout__item--top\@max-#{$bp-name} {
			align-self:flex-start;
		}

		.o-layout--bottom\@max-#{$bp-name} {
			align-items:flex-end;
		}

		.o-layout__item--bottom\@max-#{$bp-name} {
			align-self:flex-end;
		}

		.o-layout--middle\@max-#{$bp-name} {
			align-items:center;
		}

		.o-layout__item--middle\@max-#{$bp-name} {
			align-self:center;
		}

		// Columns are align to match their baseline 
		.o-layout--baseline\@max-#{$bp-name} {
			align-items:baseline;
		}

		.o-layout__item--baseline\@max-#{$bp-name} {
			align-self:baseline;
		}
	}
}


// ORDERING MODIFIERS
//--------------------------------------------------------------------------------------------------------------------------------------

// Modifers which allow you to specify an order different from the load order

// Define max order number to generate
$orders: 10;

// Changes order
// Example: .o-layout__item--1
@for $order from 1 through $orders {
	.o-layout__item--#{$order} {
		order:$order;
	}
}

// Changes order when breakpoint is hit
// Example: .o-layout__item--1@md
@each $bp-name, $bp-value in $breakpoints {
	@include bp(#{$bp-name}) {
		@for $order from 1 through $orders {
			.o-layout__item--#{$order}\@#{$bp-name}  {
				order:$order;
			}
		}
	}
}

// Changes order until breakpoint is hit
// Example: .o-layout__item--1@max-md
@each $bp-name, $bp-value in $breakpoints {
	@include bpMax(#{$bp-name}) {
		@for $order from 1 through $orders {
			.o-layout__item--#{$order}\@max-#{$bp-name}  {
				order:$order;
			}
		}
	}
}
