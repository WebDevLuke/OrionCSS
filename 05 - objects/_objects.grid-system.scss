//--------------------------------------------------------------------------------------------------------------------------------------
// GRID SYSTEM
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Grid system container, columns and optional rows. You can specify the data which feeds into this in settings.breakpoints whilst
you can alter breakpoints in /data/breakpoints.json.
*/


// SET UP VARIABLES
//--------------------------------------------------------------------------------------------------------------------------------------

// Get default attributes
$gridDefault: map-get($grid, "default");

// Set default variables
$maxWidth: map-get($gridDefault, "max-width");
$columns: map-get($gridDefault, "columns");
$gutter: map-get($gridDefault, "gutter");
$containerPadding: map-get($gridDefault, "containerPadding");
$gridMorph: null;

// Set morph object variable
@if map-has-key($grid, "morph") {
	$gridMorph: map-get($grid, "morph");
}


// BASE & ELEMENTS
//--------------------------------------------------------------------------------------------------------------------------------------

/*
<div class="o-container">
	<div class="o-row">
		<div class="o-col-4 o-col-1@md"></div>
		<div class="o-col-4 o-col-5@md"></div>
		<div class="o-col-4 o-col-6@md"></div>
	</div>
</div>
*/

/*
This approach avoids repetition of non-dynamic styles across responsive classes
*/

[class*="o-container"] {
	margin:0 auto;
	@include clearfix();
	box-sizing:content-box;
}

[class*="o-col"] {
	float: left;
	box-sizing:border-box; 
}


// CREATE  CONTAINER MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_container($maxWidth, $containerPadding) {

	// Set Base Container
	.o-container {
		max-width:rem($maxWidth);
		padding: 0 rem($containerPadding / 2) 0 rem($containerPadding / 2);
	}

}


// CREATE ROW MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_row($gutter) {
	.o-row {
		margin-left:rem(-$gutter / 2);
		margin-right:rem(-$gutter / 2);
		@include clearfix();
	}
}


// CREATE COLUMNS MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_columns($suffix, $maxWidth, $columns, $gutter) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Individual Grid Classes
	@for $i from 1 to ($columns + 1) {

		// Multiple width % by the column size
		$widthPercentage: $widthPercentageSingle * $i;

		// Example: o-col-6@md
		.o-col-#{$i}#{$suffix} {
			width: $widthPercentage;
			padding-left:rem($gutter / 2);
			padding-right:rem($gutter / 2);
			margin-left:0;
			clear:none;
		}
	}
}


// CREATE COLUMN OFFSETS  MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_offsets($suffix, $maxWidth, $columns) {

	// Calculate single column width in pixels
	$widthPX: $maxWidth / $columns;

	// Calculate single column width in percentage
	$widthPercentageSingle: ($widthPX / $maxWidth) * 100%;

	// Define Grid Offsets
	@for $i from 1 to $columns {

		// Multiple width % by the column size
		$widthPercentage: $widthPercentageSingle * $i;

		// Example u-col-offset-4@md
		.o-col-offset-#{$i}#{$suffix}	{
			margin-left:$widthPercentage;
		}

	}
}


// CREATE GRID UTILITY CLASSES MIXIN
//--------------------------------------------------------------------------------------------------------------------------------------

@mixin create_utilities($suffix) {
	.o-col-clear#{$suffix} {
		clear:both;
	}
}


// GENERATE DEFAULT CONTAINER AND COLUMN CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

@include create_container($maxWidth, $containerPadding);
@include create_row($gutter);
@include create_columns(null, $maxWidth, $columns, $gutter);
@include create_offsets(null, $maxWidth, $columns);
@include create_utilities(null);


// GENERATE RESPONSIVE CONTAINER AND GRID CLASSES
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Generate responsive classes based on breakpoints in /data/breakpoints.json. Also generates
reponsive container classes if any morphs in setting.grid-system are found.
*/
@each $bp-name, $bp-value in $breakpoints	{

	// If we discover that a morph comes into play override grid variables
	@if variable-exists(gridMorph) {
		@if map-has-key($gridMorph, $bp-name) {

			// Get grid match
			$bp-obj: map-get($gridMorph, $bp-name);

			// If present, feed variables into next round of column and creation
			@if map-has-key($bp-obj, "max-width") {
				$maxWidth: map-get($bp-obj, "max-width");
			}
			@if map-has-key($bp-obj, "columns") {
				$columns: map-get($bp-obj, "columns");
			}
			@if map-has-key($bp-obj, "containerPadding") {
				$containerPadding: map-get($bp-obj, "containerPadding");
			}
			@if map-has-key($bp-obj, "gutter") {
				$gutter: map-get($bp-obj, "gutter");
			}

			@include bp(#{$bp-name}) {
				@include create_container($maxWidth, $containerPadding);
				@include create_row($gutter);	
			}

			// Gutter is column focused rather than container so needs to treated differently
			@if map-has-key($bp-obj, "gutter") {				
				@include bp(#{$bp-name}) {
					[class^="o-col"] {
						padding-left:rem($gutter / 2);
						padding-right:rem($gutter / 2);
					}
				}
			}
		}
	}

	// Create responsive grid classes
	@include bp(#{$bp-name}) {
		@include create_columns(\@#{$bp-name}, $maxWidth, $columns, $gutter);
		@include create_offsets(\@#{$bp-name}, $maxWidth, $columns);
		@include create_utilities(\@#{$bp-name});	
	}
}


// FLUID CONTAINER MODIFIER
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Removes all width instances from container, making it stretch 100%.
*/

.o-container--fluid {
	max-width:none;
	width:100%;
}


// NON-RESPONSIVE CONTAINER MODIFIER
//--------------------------------------------------------------------------------------------------------------------------------------

/*
Makes the container non-responsive by swapping max-width for width.
NOTE: If applying this modifier, remember to remove all grid morphs from "settings.grid-system" otherwise
your fixed grid will take the width of your last morph.
*/

.o-container--fixed {
	max-width:none;
	width:$maxWidth;
}